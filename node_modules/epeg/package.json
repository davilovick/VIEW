{
  "_args": [
    [
      {
        "raw": "git://github.com/falconscript/node-epeg",
        "scope": null,
        "escapedName": null,
        "name": null,
        "rawSpec": "git://github.com/falconscript/node-epeg",
        "spec": "git://github.com/falconscript/node-epeg.git",
        "type": "hosted",
        "hosted": {
          "type": "github",
          "ssh": "git@github.com:falconscript/node-epeg.git",
          "sshUrl": "git+ssh://git@github.com/falconscript/node-epeg.git",
          "httpsUrl": "git+https://github.com/falconscript/node-epeg.git",
          "gitUrl": "git://github.com/falconscript/node-epeg.git",
          "shortcut": "github:falconscript/node-epeg",
          "directUrl": "https://raw.githubusercontent.com/falconscript/node-epeg/master/package.json"
        }
      },
      "/home/davilovick/Documents/NodeJS/TestJpegLum"
    ]
  ],
  "_from": "git://github.com/falconscript/node-epeg.git",
  "_id": "epeg@0.7.0",
  "_inCache": true,
  "_location": "/epeg",
  "_phantomChildren": {},
  "_requested": {
    "raw": "git://github.com/falconscript/node-epeg",
    "scope": null,
    "escapedName": null,
    "name": null,
    "rawSpec": "git://github.com/falconscript/node-epeg",
    "spec": "git://github.com/falconscript/node-epeg.git",
    "type": "hosted",
    "hosted": {
      "type": "github",
      "ssh": "git@github.com:falconscript/node-epeg.git",
      "sshUrl": "git+ssh://git@github.com/falconscript/node-epeg.git",
      "httpsUrl": "git+https://github.com/falconscript/node-epeg.git",
      "gitUrl": "git://github.com/falconscript/node-epeg.git",
      "shortcut": "github:falconscript/node-epeg",
      "directUrl": "https://raw.githubusercontent.com/falconscript/node-epeg/master/package.json"
    }
  },
  "_requiredBy": [
    "#USER",
    "/"
  ],
  "_resolved": "git://github.com/falconscript/node-epeg.git#cfd96155f269e1632feffbaef46cf42a18a4e3f6",
  "_shasum": "76269c63d3fdd5df4e3bc976a33db14605fc4ddc",
  "_shrinkwrap": null,
  "_spec": "git://github.com/falconscript/node-epeg",
  "_where": "/home/davilovick/Documents/NodeJS/TestJpegLum",
  "author": {
    "name": "victor.goya@af83.com"
  },
  "bugs": {
    "url": "https://github.com/phorque/node-epeg/issues"
  },
  "dependencies": {},
  "description": "Node bindings for the Epeg library",
  "devDependencies": {
    "expect.js": "~0.2.0",
    "mocha": "~1.12"
  },
  "gitHead": "5cdb43809420bc8fa661c62378ee169bd0fbe3fe",
  "gypfile": true,
  "homepage": "https://github.com/phorque/node-epeg#readme",
  "keywords": [
    "node",
    "epeg",
    "jpeg",
    "resize",
    "crop"
  ],
  "license": "BSD",
  "main": "index.js",
  "name": "epeg",
  "optionalDependencies": {},
  "readme": "# epeg\nForked from github.com/phorque/node-epeg (with github.com/L8D node v6 support)\n\n# My fixes:\n - Issue with random memory for the \"cropped\" and \"scaled\" flags (code otherwise randomly fails)\n - Improved error messages and documentation.  \nI highly recommend using my fork (this repository) over phorque's and L8D's versions.\n\n# Description\n - Crop or scale down images with the insanely fast (and commonly used) C library libjpeg\n - While libjpeg isn't as fast as libjpeg-turbo, it's waaaay faster than anything written in JavaScript\n\n# Dependencies\n - NodeJS\n - libjpeg\n\nTo install libjpeg:\n- Mac  \n```bash brew install libjpeg ```\n\n- Ubuntu  \n```bash sudo apt-get -y install libjpeg ```\n\n- Windows  \n``` I have absolutely no idea ```\n\n# Install epeg (once libjpeg installed)\nRun this command in your project directory. The --save will add this repository to your package.json\n```bash\nnpm install git://github.com/falconscript/node-epeg --save\n```\n\n\n# Usage\n\n# Load image binary\n```javascript\n// Load from path - image on disk\nvar image = new epeg.Image({path: \"./test.jpg\"}));\n```\nOR\n```javascript\n// Load from binary data - after something like fs.readFile\nvar image = new epeg.Image({data: imgBinaryBuffer}));\n```\n\n# Crop:\n\n```javascript\nvar epeg = require(\"epeg\");\n\nvar pixelsFromLeftToCrop = 100;\nvar pixelsFromTopToCrop = 50;\nvar newWidth = 200;\nvar newHeight = 300;\n\nimage = new epeg.Image({path: \"./test.jpg\"}));\nimage.crop(pixelsFromLeftToCrop, pixelsFromTopToCrop, newWidth, newHeight).saveTo(\"./output.jpg\");\n```\n\n# Downsize:\nScale an image down\n\n```javascript\nvar epeg = require(\"epeg\");\n\nvar newWidthInPixels = 150;\nvar newHeightInPixels = 50;\nvar saveQualityPercent = 90;\n\nimage = new epeg.Image({path: \"./test.jpg\"}));\nimage.downsize(newWidthInPixels, newHeightInPixels, saveQualityPercent).saveTo(\"./ugly.jpg\");\n```\n\n# Quality parameter\nNote that crop and downsize can take an optional extra 'quality' parameter between 1 and 100 (default is 85)\n\n\n# To get raw image buffer\nInstead of saving with .saveTo(filename), you can call .process() after downsize/crop\n\n```javascript\nvar fs = require(\"fs\");\nvar epeg = require(\"epeg\");\n\nfs.readFile(\"./test.jpg\", function(err, data) {\n  // load the image with the binary buffer\n  var image = new epeg.Image({data: data});\n  var rawImageBuffer = image.downsize(100, 100).process();\n  \n  // do whatever with the rawImageBuffer, maybe do a phash or something for image similarity?\n  \n  // write changed image to disk\n  fs.writeFileSync(\"./output.jpg\", buffer);\n});\n```\n\n# Credits\ngithub.com/phorque - Original repository  \ngithub.com/L8D - added crucial node v6 support  \ngithub.com/falconscript - fixed memory flag runtime error and added docs\n",
  "readmeFilename": "README.md",
  "repository": {
    "type": "git",
    "url": "git://github.com/phorque/node-epeg.git"
  },
  "scripts": {
    "install": "node-gyp rebuild",
    "test": "mocha"
  },
  "version": "0.7.0"
}
